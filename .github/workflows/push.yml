name: Push docker image

on:
  workflow_dispatch:
    inputs:
      ref:
        type: string
        description: "Which ref should be checked out?"
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_ROLE: arn:aws:iam::019120760881:role/prod-use1-github-oidc-role
  AWS_ECR_REPOSITORY: probelab

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checking out repository code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setting up Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Setting up just
        uses: extractions/setup-just@v3

      - name: Running tests
        run: just test

  push_to_ecr:
    name: Push Docker image to ProbeLab's ECR
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checking out the Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Configuring AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
          role-session-name: PushToECR

      - name: Logging in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Building Bitswap Sniffer Image Metadata
        id: meta
        run: |
          SHA_SHORT=${{ github.sha }}
          SHA_SHORT=${SHA_SHORT::7}

          NAMESPACE=${{ steps.login-ecr.outputs.registry }}
          TAG="bitswap-sniffer-${SHA_SHORT}"

          IMAGE="$NAMESPACE/$AWS_ECR_REPOSITORY:$TAG"

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Checking if Image exists in ECR
        id: check-ecr
        run: |
          aws ecr describe-images --repository-name $AWS_ECR_REPOSITORY --image-ids imageTag=${{ steps.meta.outputs.tag }} || exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

      - name: Setting up just
        uses: extractions/setup-just@v3

      - name: Building Docker Image ${{ steps.meta.outputs.tag }}
        id: build
        if: steps.check-ecr.outputs.exit_code != 0
        run: just docker

      - name: Pushing Docker Image ${{ steps.meta.outputs.tag }} to Amazon ECR
        id: push
        if: steps.check-ecr.outputs.exit_code != 0
        run: just docker-push

  deploy-to-ecs:
    if: github.event_name == 'push' || github.event.inputs.deploy_to_ecs == 'true'
    needs: [push_to_ecr]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checking out code
        uses: actions/checkout@v4
        with:
          lfs: "true"

      - name: Configuring AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Downloading latest Amazon ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEF }} \
            --query taskDefinition > task-definition.json

      # https://github.com/aws-actions/amazon-ecs-deploy-task-definition/issues/176
      # This isn't critical but just avoids some warning messages in the next step
      - name: Removing invalid ${{ inputs.service }} task definition fields
        run: |
          cat task-definition.json | jq -r 'del(
            .taskDefinitionArn,
            .requiresAttributes,
            .compatibilities,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          )' > task-definition-cleaned.json

      - name: Updating Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-cleaned.json
          container-name: prod-use1-cmi-bitsniffer
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.push_to_ecr.outputs.image_tag }}
          environment-variables: |
            STATIC_FILES_VERSION=${{ needs.push_to_ecr.outputs.short_sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 10
          propagate-tags: SERVICE
          enable-ecs-managed-tags: true
