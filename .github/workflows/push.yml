name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      ref:
        type: string
        description: "Which ref should be checked out?"
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_ROLE: arn:aws:iam::019120760881:role/prod-use1-github-oidc-role
  ECR_REGISTRY: 019120760881.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: probelab
  AWS_REGION: us-east-1
  ECS_CLUSTER: prod-use1-cmi-ecs-cluster
  ECS_SERVICE: prod-use1-cmi-bitsniffer
  ECS_TASK_DEF: prod-use1-cmi-bitsniffer-task

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checking out repository code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setting up Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Setting up just
        uses: extractions/setup-just@v3

      - name: Running tests
        run: just test

  build-and-push:
    name: Build Docker image and push to ProbeLab's ERC
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
      short_sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      - name: Checking out the Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Getting short SHA for commit
        id: vars
        run: |
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "image_tag=bitswap-sniffer-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Configuring AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
          role-session-name: PushToECR

      - name: Logging in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Checking if image exists
        id: check_image
        run: |
          if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=${{ steps.vars.outputs.image_tag }} --region $AWS_REGION > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Image with tag ${{ steps.vars.outputs.image_tag }} already exists, skipping build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Image with tag ${{ steps.vars.outputs.image_tag }} does not exist, will build"
          fi

      - name: Build Docker image
        if: steps.check_image.outputs.exists == 'false'
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.image_tag }} .

      - name: Push to ECR
        if: steps.check_image.outputs.exists == 'false'
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.image_tag }}

  deploy-to-ecs:
    if: github.event_name == 'push' || github.event.inputs.deploy_to_ecs == 'true'
    needs: [build-and-push]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checking out code
        uses: actions/checkout@v4
        with:
          lfs: "true"

      - name: Configuring AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Downloading latest Amazon ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEF }} \
            --query taskDefinition > task-definition.json

      # https://github.com/aws-actions/amazon-ecs-deploy-task-definition/issues/176
      # This isn't critical but just avoids some warning messages in the next step
      - name: Removing invalid ${{ inputs.service }} task definition fields
        run: |
          cat task-definition.json | jq -r 'del(
            .taskDefinitionArn,
            .requiresAttributes,
            .compatibilities,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          )' > task-definition-cleaned.json

      - name: Updating Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-cleaned.json
          container-name: prod-use1-cmi-bitsniffer-bitsniffer
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 10
          propagate-tags: SERVICE
          enable-ecs-managed-tags: true
